#!/usr/bin/python3
import hashlib
import sys

# Define some variables
## Things that CAN change
argNum = 7 # Number of arguments including program call

## Things that should not change
argIsh = 0 # Short for argument issue, meaning wrong number of arguments
trip = 0 # The trip that contains error codes, a check is run every once in a while
sOrF = 0 # 0 is string 1 is file
Hash = "" # Variable that contains the hash
alg = "" # The algorithm specified

# Get usage out of the way
def usage():
	print("Usage: hashCracker [OPTIONS] [FILE/STRING]\n")
	print("-a                    Give hashing algorithm")
	print("  -- Currently supporting: md5, sha1, sha224, sha256, sha384, sha512\n")
	print("-w                    Specify path to wordlist")
	print("-f                    Specify path to file containing one hash per line")
	print("-s                    Give the string to be cracked")
	print("-h     --help         Display this message\n\n")
	print("Examples:")
	print("hashCracker -a md5 -w $HOME/legalStuff/wordlists/medium -s 6131647dd67a67db0022ebec8dea160d")
	print("hashCracker -a sha256 -w $HOME/legalStuff/wordlists/medium -f test\n")
	
def error(errCode):
	usage()
	print("===================\n")
	if errCode == 1:  # Argument issue
		if argIsh == 1:     # Too few
			print("Error: Too few arguments")
			print("Solution: Give more arguments")
			print("I require {} argument(s), I was given {}".format(argNum - 1, len(sys.argv) - 1))
		if argIsh == 2:		# Too many
			print("Error: Too many arguments")
			print("Solution: Give less arguments")
			print("I require {} argument(s), I was given {}".format(argNum - 1, len(sys.argv) - 1))
		if argIsh == 3:		# No arguments
			print("Error: No arguments given")
			print("Solution: Give {} argument(s)".format(argNum - 1))
		exit(1)
	if errCode == 2:  # Failed to parse arguments
		print("Error: Failed to parse flags/arguments")
		print("Solution: Adjust command, maybe follow the examples")
		print("Make sure all needed arguments are included")
		exit(2)
	if errCode == 3:  # Failed to open hash file
		print("Error: Failed to open/read hash file")
		print("Solution: Check that file exists and the given path is correct")
		exit(3)
	if errCode == 4:  # Failed to open wordlist
		print("Error: Failed to open/read wordlist")
		print("Solution: Check that the wordlist exists and the given path is correct")
		exit(4)
	if errCode == 14: # Failed to crack
		print("Error: Failed to crack hash, not due to its absence in a wordlist")
		print("Solution: Not sure, you really screwed this one up")
		exit(14)
	if errCode == 15: # Failed algorithm
		print("Error: Couldn't understand algorithm given")
		print("Solution: Give a supported algorithm")
		exit(15)

# Setup an error checker
def tripChecker():
	if trip != 0:
		error(trip)

# Check command line arguments
if len(sys.argv) != argNum:
	trip = 1
	if len(sys.argv) < argNum:
		argIsh = 1 # Too few arguments
		if len(sys.argv) >= 2:
			if "-h" in sys.argv or "--help" in sys.argv:
				usage()
				exit(1)
	if len(sys.argv) > argNum:
		argIsh = 2 # Too many arguments
	if len(sys.argv) == 1:
		argIsh = 3 # No arguments
tripChecker()

# Create a flag parser
def flagParser(flag): # Just return the value after the flag
	global trip
	if flag in sys.argv:
		counter = 0
		for x in sys.argv:
			if x == flag:
				if counter + 2 <= len(sys.argv):
						return(sys.argv[counter + 1])
				else:
					trip = 2
			counter += 1
	else:
		trip = 2
	tripChecker()

# Setup line num grabber thing
## Credit to SilentGhost on StackOverflow
def file_len(fname):
    with open(fname) as f:
        for i, l in enumerate(f):
            pass
    return(i + 1)

# Parse command line arguments into variables
if "-s" in sys.argv: # string
	sOrF = 0
	Hash = flagParser("-s").lower()
elif "-f" in sys.argv: # file
	sOrF = 1
	try:
		hashFile = open(flagParser("-f"), "r")
		presHash = file_len(flagParser("-f"))
	except:
		trip = 3
else:
	trip = 1

if "-a" in sys.argv:
	alg = flagParser("-a").lower()
else:
	trip = 1
tripChecker()

# Parse alg argument into commands
alg = alg.lower()
if alg == "md5":
	alg = hashlib.md5
elif alg == "sha1":
	alg = hashlib.sha1
elif alg == "sha224":
	alg = hashlib.sha224
elif alg == "sha256":
	alg = hashlib.sha256
elif alg == "sha384":
	alg = hashlib.sha384
elif alg == "sha512":
	alg = hashlib.sha512
else:
	trip = 15
tripChecker()

# Make sure the wordlist exists
try:
	wListTest = open(flagParser("-w"), "r")
	wListTest.close()
except:
	trip = 4
tripChecker()

# Get crackin!!
counter = 0
keyNum = 0
# Create a list with hashes
if sOrF == 1:
	hashList = []
	for x in hashFile.readlines():
		hashList.append(x.rstrip())
	hashFile.close()
if sOrF == 1:
	try:
		with open(flagParser("-w"), "r") as wList:
			# Open the results
			results = open("results.txt", "a+")
			for theHash in hashList:
				counter = 0
				keyNum += 1
				theHash = theHash.rstrip()
				for x in wList:
					counter += 1
					#Save x's hex MD5 as hexx (see what I did there?)
					xNew = x.strip("\n")
					hexxtemp = alg(xNew.encode())
					hexx = hexxtemp.hexdigest()
					if hexx == theHash:
						print("		Attempt #{}".format(counter))
						print("=======================================\n\n")
						print("               Key Found!!             \n\n")
						print("		" + str(x))
						print("	Algorithm: {}".format(alg))
						print(str(theHash) + "\n\n")
						print("=======================================")
						results.write("Key #{}\nAttempt #{}\nKey:\n\n{}\n\nHash:\n{}\n\n=========================\n\n".format(keyNum, counter, xNew, theHash))
						break
					else:
						print("Attempt #{}".format(counter))
						print("---{}".format(x))
				wList.seek(0)
	except KeyboardInterrupt:
		print("Shutdown requested:")
		print("Shutting down...")
		trip = 12
	finally:
		wList.close()
		if trip == 12:
			print("=======================================\n\n")
			print("     Keyboard Interrupt\n")
			print("          Hash:")
			print(theHash)
			print("\n Algorithm: {}".format(alg))
			print("\n\n=======================================")
			results.write("Key #{}\n\nKeyboard Interrupt\n\nAttempt #{}\nHash:\n{}\n\n=========================\n\n".format(keyNum, counter, theHash))
			exit(12)
		elif trip == 0:
			exit(0)
		else:
			print("=======================================\n\n")
			print("     Not in wordlist\n")
			print("          Hash:")
			print(Hash)
			print("\n Algorithm: {}".format(alg))
			print("\n\n=======================================")
			results.write("Key #{}\nAttempt #{}\nKey:\n\n{}\n\nHash:\n{}\n\n=========================\n\n".format(keyNum, counter, xNew, theHash))
			wList.seek(0)
elif sOrF == 0:
	with open(flagParser("-w")) as wList:
		try:
			# Open the results
			results = open("results.txt", "a+")
			for x in wList:
				counter += 1
				#Save x's hex MD5 as hexx (see what I did there?)
				xNew = x.strip("\n")
				hexxtemp = alg(xNew.encode())
				hexx = hexxtemp.hexdigest()
				if hexx == Hash:
					print("		Attempt #{}".format(counter))
					print("=======================================\n\n")
					print("               Key Found!!             \n\n")
					print("		" + str(x))
					print("	Algorithm: {}".format(alg))
					print(str(hexx) + "\n\n")
					print("=======================================")
					wList.close()
					exit(0)
				else:
					print("Attempt #{}".format(counter))
					print("---{}".format(x))

		except KeyboardInterrupt:
			print("Shutdown requested:")
			print("Shutting down...")
			trip = 12
		finally:
			wList.close()
			if trip == 12:
				print("=======================================\n\n")
				print("     Keyboard Interrupt\n")
				print("          Hash:")
				print(Hash)
				print("\n Algorithm: {}".format(alg))
				print("\n\n=======================================")
				exit(12)
			elif trip == 0:
				exit(0)
			else:
				print("=======================================\n\n")
				print("     Not in wordlist\n")
				print("          Hash:")
				print(Hash)
				print("\n Algorithm: {}".format(alg))
				print("\n\n=======================================")
else:
	print("No clue why or how you got to this\nGood Luck!!")
	exit(1235)
tripChecker()

wList.close()
